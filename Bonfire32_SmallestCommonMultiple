*/
Bonfire: Smallest Common Multiple
Difficulty:â€‰
Find the smallest number that is evenly divisible by all numbers in the provided range.

In other words, given the range [3,7], you will need to find the least common multiple of 3, 4, 5, 6, and 7.

The range will be an array of two numbers that will not necessarily be in numerical order.

Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.

Here are some helpful links:

Smallest Common Multiple
*/
function smallestCommons(arr) {
  // Error checking
  if (!(arr.length===2)) return -1;
 
  // Generate array based on range given
  arr2 = []; var j=0;
  var start = (arr[0]>arr[1])? arr[1]:arr[0];
  var end   = (arr[0]>arr[1])? arr[0]:arr[1];
  
  for (var i=start; i<=end; ++i) {
    arr2[j] = i;
    j++;
  } 
  
  // Another error checking
  if (!arr2.length) return -1;
  if (arr2.length<2) return arr2[0];
  
  // Function to calculate Greatest Common Divisor of 2 numbers
  function gcd(num1, num2) {
    var dividend  = (num1 > num2)?num1:num2;
    var divisor   = (num1 < num2)?num1:num2;
    var remainder = dividend%divisor;
    while (remainder !== 0) {
      dividend  = divisor;
      divisor   = remainder;
      remainder = dividend%divisor;    
    }
    return divisor;
  }
  
  // Function to calculate Lowest Common Multiple of 2 numbers
  // lcm(a,b) = (a*b)/gcd(a,b)
  function lcm(num1, num2) {
    return (num2*(num1/gcd(num1,num2)));
  }
  
  // Recursively apply lcm function to the array and return the value
  var lcm2 = arr2.reduce(function(a,b){return lcm(a,b);});
  return lcm2;
}
/*
Test
smallestCommons([1,5]);
expect(smallestCommons([1,5])).to.be.a('number');
expect(smallestCommons([1,5])).to.equal(60);
expect(smallestCommons([5,1])).to.equal(60);
expect(smallestCommons([1,13])).to.equal(360360);
*/
