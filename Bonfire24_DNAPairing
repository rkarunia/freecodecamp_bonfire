//Bonfire: DNA Pairing
//Difficulty:**
//The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.
//
//Base pairs are a pair of AT and CG. Match the missing element to the provided character.
//
//Return the provided character as the first element in each array.
//
//For example, for the input GCG, return [['G', 'C'], ['C','G'],['G', 'C']]
//
//The charater and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.
//
//Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.
//
//Here are some helpful links:
//
//Array.push()
//String.split()

function pair(str) {
  
  var paired = str.split("").map(function pairDNA (aChar) {
    var dnaPair = [];
    dnaPair.push(aChar);
    switch (aChar) {
      case 'G':
        dnaPair.push('C');
        break;
      case 'C':
        dnaPair.push('G');
        break;
      case 'A':
        dnaPair.push('T');
        break;
      case 'T':
        dnaPair.push('A');
        break; 
      default:
        break;
    }
    return dnaPair;
  });
  
  return paired;
}

// Test
//pair("GCG");
//assert.deepEqual(pair("ATCGA"),[['A','T'],['T','A'],['C','G'],['G','C'],['A','T']], 'should return the dna pair');
//assert.deepEqual(pair("TTGAG"),[['T','A'],['T','A'],['G','C'],['A','T'],['G','C']], 'should return the dna pair');
//assert.deepEqual(pair("CTCTA"),[['C','G'],['T','A'],['C','G'],['T','A'],['A','T']], 'should return the dna pair');
