//Write a function that splits an array (first argument) into groups the length of size (second argument) and returns them as a multidimensional array.
//
//Remember to use RSAP if you get stuck. Try to pair program. Write your own code.
//
//Here are some helpful links:
//
//Array.push()

function chunk(arr, size) {
  // Break it up.
  var chunked = [];
  for (var i=0; i<(Math.ceil(arr.length/size)); ++i) {
    var item = [];
    for (var j=(i*size); j<(i*size+size); ++j) {
      if (j<arr.length) {
        item.push(arr[j]);
      }
    }
    chunked.push(item);
  }
  
  return chunked;
}


// Test cases
//assert.deepEqual(chunk(['a', 'b', 'c', 'd'], 2), [['a', 'b'], ['c', 'd']], 'should return chunked arrays');
//assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], 'should return chunked arrays');
//assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], 'should return chunked arrays');
//assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], 'should return the last chunk as remaining elements');
